# -*- coding: utf-8 -*-
"""Rock  Mine  Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VgG_D_Cw4RCviXTtMFmM0Eu_CYx38GVm
"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score

"""Data Collection and Data Processing"""

sonar_dataset=pd.read_csv("/content/sonar data.csv", header = None)

sonar_dataset.shape

sonar_dataset.head()

# describe() gives the statistical measures data of the sonar dataset
sonar_dataset.describe()

sonar_dataset[60].value_counts()

"""M ---> Mine
R ---> Rock
"""

sonar_dataset.groupby(60).mean()

# Finding the total number of null values
sonar_dataset.isnull().sum()

# seperating data and labels
X = sonar_dataset.drop(columns=60, axis=1)
Y  = sonar_dataset[60]

print(X)
print(Y)

"""Model Selection

compairing the models with default hyperparameter values using Cross Validation
"""

models = [LogisticRegression(max_iter= 1000), SVC(kernel="linear"), KNeighborsClassifier()]

def models_comparision_with_cross_validation():

  for model in models:

    CV_score = cross_val_score(model, X, Y, cv = 5)
    mean_accuracy = sum(CV_score)/len(CV_score)
    mean_accuracy = mean_accuracy*100
    mean_accuracy = round(mean_accuracy, 2)

    print("Cross Validation accuracies for the ", model , ":", CV_score)

    print("Accuracy score for the model", model, ":", mean_accuracy)

    print("****************************************************************")

models_comparision_with_cross_validation()

"""Note: for the sonar data LogisticRegression model has the highest accuracy with default hyperparameter values

Hyperparameter Tuning
"""

model_hyperparameters ={ 'C' :  [1,5,10,20]}

classifier = GridSearchCV(LogisticRegression(max_iter = 1000), model_hyperparameters)

classifier.fit(X, Y)

classifier.cv_results_

best_parameters = classifier.best_params_

# we got C=1 as the best hyperparameter by hyperparameter tuning
print(best_parameters)

highest_accuracy_score = classifier.best_score_
print(highest_accuracy_score)

result = pd.DataFrame(classifier.cv_results_)

result.head()

result.shape



"""Traning and Text data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

"""Model Training ---> Logistic Regression"""

# model=RandomForestClassifier()
#cuuracy on training data :  1.0 and Acuuracy on test data :  0.7142857142857143  here if we use RandomForestClassifir algorithm the model is overfitting,
# Hence we will use LogisticRegression
model=LogisticRegression(C = 1)

# training the Logistic Regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

# accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Acuuracy on training data : ", training_data_accuracy)

# accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Acuuracy on test data : ", test_data_accuracy)

"""Making a Predictive System"""

input_data=(0.0298,0.0615,0.0650,0.0921,0.1615,0.2294,0.2176,0.2033,0.1459,0.0852,0.2476,0.3645,0.2777,0.2826,0.3237,0.4335,0.5638,0.4555,0.4348,0.6433,0.3932,0.1989,0.3540,0.9165,0.9371,0.4620,0.2771,0.6613,0.8028,0.4200,0.5192,0.6962,0.5792,0.8889,0.7863,0.7133,0.7615,0.4401,0.3009,0.3163,0.2809,0.2898,0.0526,0.1867,0.1553,0.1633,0.1252,0.0748,0.0452,0.0064,0.0154,0.0031,0.0153,0.0071,0.0212,0.0076,0.0152,0.0049,0.0200,0.0073)

# changeing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if (prediction[0]=="R"):
  print("The object is a Rock")
else:
  print("The object is a mine")

